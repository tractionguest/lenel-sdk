=begin
#OpenAccess

#This document describes the OpenAccess REST API. OpenAccess provides access to OnGuard via a RESTful web service.  ## Security / licensing headers  Each authenticated request must include the following HTTP headers:   - `Application-Id` - Each application using the OpenAccess API must have a unique application ID.   - `Session-Token` - A session token is retrieved by logging in via the `POST /authentication` operation.  ## Input parameter location - Query string or request body?  Input parameters can be placed either in the request body or in the URL, as a query parameter. The API makes no distinction and will handle them in either location. In the API specification, some parameters are described as being in the request body, and others are described as being in the query string. This is done simply for clarity in each situation, but clients of the API are free to include parameters wherever it is most convenient. **Sensitive data should always be placed in the request body and not exposed in the URL.**  ### **POST /instances** example  ``` POST /instances?type_name=Lnl_Cardholder&version=1.0 {   \"property_value_map\": {     ...   } } ```  ...is equivalent to this...  ``` POST /instances&version=1.0 {   \"type_name\": \"Lnl_Cardholder\",   \"property_value_map\": {     ...   } } ```  ## Task queuing - dealing with long running requests  Some requests might take a long time, especially requests that access external systems, such as Active Directory. Standard OpenAccess requests will time out after 30 seconds if the HTTP request doesn't time out sooner, depending on the client. Any request that you expect to run long can be queued as a task by adding a `queue` property to the request, set to `true`. For example: ``` GET /directory_accounts_matching_cardholders?directory_id=id1 &cardholder_ids=[1,2,3,4,5,6,7,8,9,10] &filter=displayname has 'firstname' and displayname has 'lastname' &queue=true &version=1.0 ```  When a request is queued in this way, OpenAccess will queue a task for execution and return a 202 (Accepted) HTTP status code and a response identical to `GET /queue/{id}`. For example: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"status\": \"pending\",   \"version\": \"1.0\" } ```  The `id` property indicates the ID of the queued task, which can be used to check the status of the task: ``` GET /queue/5c4b7890-ee73-4199-b3d3-366003eb8ca1?version=1.0 ```  When the task is complete, the response will include the response to the queued request: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"response\": {     ...   },   \"status\": \"complete\",   \"version\": \"1.0\" } ```  The response can be retrieved any number of times until the task is deleted. A completed task can be deleted with `DELETE /queue/{id}` or it will be deleted automatically after 1 hour.  **Note:** Even though you can queue any request, it's only recommended when a request is expected to run long, like `GET /directory_accounts` and `GET /directory_accounts_matching_cardholders`.  ## Samples  There are several sample applications that demonstrate various aspects of the API.  ### [Cardholder Search](/api/access/onguard/openaccess/samples/Cardholder Search) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting cardholders and photos - `GET /instances`  ### [Command and Control](/api/access/onguard/openaccess/samples/Command and Control) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting panels and readers - `GET /instances` - Updating hardware status, getting/setting reader mode, and opening doors - `POST /execute_method`  ### [Event Subscriber](/api/access/onguard/openaccess/samples/Event Subscriber) - Getting directories used for authentication - `GET /directories` (not used within every event subscriber sample) - Login and logout - `POST /authentication` and `DELETE /authentication` - Adding/modifying/disabling event subscriptions - `POST /event_subscriptions`, `PUT /event_subscriptions`, and `DELETE /event_subscriptions` - Using the Web Event Bridge to receive events via WebSocket 

OpenAPI spec version: 7.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9-SNAPSHOT

=end

require 'uri'

module LenelSDK
  class AuthenticationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Login
    # Login to the API, retrieving a session token. This method expects the **Application-Id** HTTP header, but does not require **Session-Token**. 
    # @param credentials Either username and password must be present, or the oidc_token must be present.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;. (default to false)
    # @return [Object]
    def add_authentication(credentials, version, opts = {})
      data, _status_code, _headers = add_authentication_with_http_info(credentials, version, opts)
      data
    end

    # Login
    # Login to the API, retrieving a session token. This method expects the **Application-Id** HTTP header, but does not require **Session-Token**. 
    # @param credentials Either username and password must be present, or the oidc_token must be present.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def add_authentication_with_http_info(credentials, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.add_authentication ...'
      end
      # verify the required parameter 'credentials' is set
      if @api_client.config.client_side_validation && credentials.nil?
        fail ArgumentError, "Missing the required parameter 'credentials' when calling AuthenticationApi.add_authentication"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling AuthenticationApi.add_authentication"
      end
      # resource path
      local_var_path = '/authentication'

      # query parameters
      query_params = {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credentials)
      auth_names = ['ApplicationId']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#add_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Logout
    # Logout of the API, invalidating the session token.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;. (default to false)
    # @return [SharedResponseDefinition]
    def delete_authentication(version, opts = {})
      data, _status_code, _headers = delete_authentication_with_http_info(version, opts)
      data
    end

    # Logout
    # Logout of the API, invalidating the session token.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @return [Array<(SharedResponseDefinition, Fixnum, Hash)>] SharedResponseDefinition data, response status code and response headers
    def delete_authentication_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.delete_authentication ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling AuthenticationApi.delete_authentication"
      end
      # resource path
      local_var_path = '/authentication'

      # query parameters
      query_params = {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SharedResponseDefinition')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#delete_authentication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get directories
    # Gets the authentication directories configured.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;. (default to false)
    # @return [Directories]
    def get_directories(version, opts = {})
      data, _status_code, _headers = get_directories_with_http_info(version, opts)
      data
    end

    # Get directories
    # Gets the authentication directories configured.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @return [Array<(Directories, Fixnum, Hash)>] Directories data, response status code and response headers
    def get_directories_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.get_directories ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling AuthenticationApi.get_directories"
      end
      # resource path
      local_var_path = '/directories'

      # query parameters
      query_params = {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Directories')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#get_directories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get identity provider URL.
    # Get login URL for the selected OpenID Connect identity provider.
    # @param directory_id The directory ID of the selected identity provider.
    # @param redirect_url The URL to which the identity provider should send its response.
    # @param response_mode The mode the identity provider should use to respond. Valid values are \&quot;form_post\&quot; and \&quot;fragment\&quot;. With \&quot;form_post\&quot;, the identity provider responds with an HTTP POST to the redirect_url, with the content in the message body. With \&quot;fragment\&quot;, the response is contained in the redirect URL.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;. (default to false)
    # @return [Object]
    def get_identity_provider_url(directory_id, redirect_url, response_mode, version, opts = {})
      data, _status_code, _headers = get_identity_provider_url_with_http_info(directory_id, redirect_url, response_mode, version, opts)
      data
    end

    # Get identity provider URL.
    # Get login URL for the selected OpenID Connect identity provider.
    # @param directory_id The directory ID of the selected identity provider.
    # @param redirect_url The URL to which the identity provider should send its response.
    # @param response_mode The mode the identity provider should use to respond. Valid values are \&quot;form_post\&quot; and \&quot;fragment\&quot;. With \&quot;form_post\&quot;, the identity provider responds with an HTTP POST to the redirect_url, with the content in the message body. With \&quot;fragment\&quot;, the response is contained in the redirect URL.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_identity_provider_url_with_http_info(directory_id, redirect_url, response_mode, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.get_identity_provider_url ...'
      end
      # verify the required parameter 'directory_id' is set
      if @api_client.config.client_side_validation && directory_id.nil?
        fail ArgumentError, "Missing the required parameter 'directory_id' when calling AuthenticationApi.get_identity_provider_url"
      end
      # verify the required parameter 'redirect_url' is set
      if @api_client.config.client_side_validation && redirect_url.nil?
        fail ArgumentError, "Missing the required parameter 'redirect_url' when calling AuthenticationApi.get_identity_provider_url"
      end
      # verify the required parameter 'response_mode' is set
      if @api_client.config.client_side_validation && response_mode.nil?
        fail ArgumentError, "Missing the required parameter 'response_mode' when calling AuthenticationApi.get_identity_provider_url"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling AuthenticationApi.get_identity_provider_url"
      end
      # resource path
      local_var_path = '/identity_provider_url'

      # query parameters
      query_params = {}
      query_params[:'directory_id'] = directory_id
      query_params[:'redirect_url'] = redirect_url
      query_params[:'response_mode'] = response_mode
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#get_identity_provider_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the session data for a session token
    # Used to retrieve the session data associated with a session token. 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;. (default to false)
    # @return [Object]
    def get_session(version, opts = {})
      data, _status_code, _headers = get_session_with_http_info(version, opts)
      data
    end

    # Get the session data for a session token
    # Used to retrieve the session data associated with a session token. 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_session_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.get_session ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling AuthenticationApi.get_session"
      end
      # resource path
      local_var_path = '/session'

      # query parameters
      query_params = {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#get_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
