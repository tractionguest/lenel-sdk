=begin
#OpenAccess

#This document describes the OpenAccess REST API. OpenAccess provides access to OnGuard via a RESTful web service.  ## Security / licensing headers  Each authenticated request must include the following HTTP headers:   - `Application-Id` - Each application using the OpenAccess API must have a unique application ID.   - `Session-Token` - A session token is retrieved by logging in via the `POST /authentication` operation.  ## Input parameter location - Query string or request body?  Input parameters can be placed either in the request body or in the URL, as a query parameter. The API makes no distinction and will handle them in either location. In the API specification, some parameters are described as being in the request body, and others are described as being in the query string. This is done simply for clarity in each situation, but clients of the API are free to include parameters wherever it is most convenient. **Sensitive data should always be placed in the request body and not exposed in the URL.**  ### **POST /instances** example  ``` POST /instances?type_name=Lnl_Cardholder&version=1.0 {   \"property_value_map\": {     ...   } } ```  ...is equivalent to this...  ``` POST /instances&version=1.0 {   \"type_name\": \"Lnl_Cardholder\",   \"property_value_map\": {     ...   } } ```  ## Task queuing - dealing with long running requests  Some requests might take a long time, especially requests that access external systems, such as Active Directory. Standard OpenAccess requests will time out after 30 seconds if the HTTP request doesn't time out sooner, depending on the client. Any request that you expect to run long can be queued as a task by adding a `queue` property to the request, set to `true`. For example: ``` GET /directory_accounts_matching_cardholders?directory_id=id1 &cardholder_ids=[1,2,3,4,5,6,7,8,9,10] &filter=displayname has 'firstname' and displayname has 'lastname' &queue=true &version=1.0 ```  When a request is queued in this way, OpenAccess will queue a task for execution and return a 202 (Accepted) HTTP status code and a response identical to `GET /queue/{id}`. For example: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"status\": \"pending\",   \"version\": \"1.0\" } ```  The `id` property indicates the ID of the queued task, which can be used to check the status of the task: ``` GET /queue/5c4b7890-ee73-4199-b3d3-366003eb8ca1?version=1.0 ```  When the task is complete, the response will include the response to the queued request: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"response\": {     ...   },   \"status\": \"complete\",   \"version\": \"1.0\" } ```  The response can be retrieved any number of times until the task is deleted. A completed task can be deleted with `DELETE /queue/{id}` or it will be deleted automatically after 1 hour.  **Note:** Even though you can queue any request, it's only recommended when a request is expected to run long, like `GET /directory_accounts` and `GET /directory_accounts_matching_cardholders`.  ## Samples  There are several sample applications that demonstrate various aspects of the API.  ### [Cardholder Search](/api/access/onguard/openaccess/samples/Cardholder Search) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting cardholders and photos - `GET /instances`  ### [Command and Control](/api/access/onguard/openaccess/samples/Command and Control) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting panels and readers - `GET /instances` - Updating hardware status, getting/setting reader mode, and opening doors - `POST /execute_method`  ### [Event Subscriber](/api/access/onguard/openaccess/samples/Event Subscriber) - Getting directories used for authentication - `GET /directories` (not used within every event subscriber sample) - Login and logout - `POST /authentication` and `DELETE /authentication` - Adding/modifying/disabling event subscriptions - `POST /event_subscriptions`, `PUT /event_subscriptions`, and `DELETE /event_subscriptions` - Using the Web Event Bridge to receive events via WebSocket 

OpenAPI spec version: 7.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9-SNAPSHOT

=end

require 'uri'

module LenelSDK
  class CardholdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Search directory accounts
    # Gets directory accounts matching the provided filter.  **Note:** Depending on the Active Directory server configuration, number of users in the directory, and uniqueness of search criteria, this method may time out. 
    # @param directory_id Directory ID for the directory containing the active directory accounts you want to find.
    # @param filter Filter format -&#x60;&lt;ADattr&gt; &lt;condition&gt; &#39;&lt;value&gt;&#39;&#x60;. EX: &#x60;displayname has &#39;smith&#39;&#x60; -  Support Conditions - &#x60;eq&#x60;, &#x60;has&#x60;. One specific case is &#x60;&lt;ADattr&gt; &lt;eq&gt; &#39;&#39;&#x60; which means AD attribute&#39;s value is empty.  EX: &#x60;displayname eq &#39;&#39;&#x60; -  Support negative conditions -    &#x60;not(&lt;ADattr.&gt; &lt;has&gt; &#39;&lt;value&gt;&#39;)&#x60; means AD attribute&#39;s value does not contain the input value. EX: &#x60;not(samaccountname has &#39;smith&#39;)&#x60;   &#x60;not(&lt;ADattr.&gt; &lt;eq&gt; &#39;&#39;)&#x60; means AD attribute&#39;s value is not empty.  
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;. (default to false)
    # @return [DirectoryAccounts]
    def get_active_directory_accounts(directory_id, filter, version, opts = {})
      data, _status_code, _headers = get_active_directory_accounts_with_http_info(directory_id, filter, version, opts)
      data
    end

    # Search directory accounts
    # Gets directory accounts matching the provided filter.  **Note:** Depending on the Active Directory server configuration, number of users in the directory, and uniqueness of search criteria, this method may time out. 
    # @param directory_id Directory ID for the directory containing the active directory accounts you want to find.
    # @param filter Filter format -&#x60;&lt;ADattr&gt; &lt;condition&gt; &#39;&lt;value&gt;&#39;&#x60;. EX: &#x60;displayname has &#39;smith&#39;&#x60; -  Support Conditions - &#x60;eq&#x60;, &#x60;has&#x60;. One specific case is &#x60;&lt;ADattr&gt; &lt;eq&gt; &#39;&#39;&#x60; which means AD attribute&#39;s value is empty.  EX: &#x60;displayname eq &#39;&#39;&#x60; -  Support negative conditions -    &#x60;not(&lt;ADattr.&gt; &lt;has&gt; &#39;&lt;value&gt;&#39;)&#x60; means AD attribute&#39;s value does not contain the input value. EX: &#x60;not(samaccountname has &#39;smith&#39;)&#x60;   &#x60;not(&lt;ADattr.&gt; &lt;eq&gt; &#39;&#39;)&#x60; means AD attribute&#39;s value is not empty.  
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @return [Array<(DirectoryAccounts, Fixnum, Hash)>] DirectoryAccounts data, response status code and response headers
    def get_active_directory_accounts_with_http_info(directory_id, filter, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardholdersApi.get_active_directory_accounts ...'
      end
      # verify the required parameter 'directory_id' is set
      if @api_client.config.client_side_validation && directory_id.nil?
        fail ArgumentError, "Missing the required parameter 'directory_id' when calling CardholdersApi.get_active_directory_accounts"
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling CardholdersApi.get_active_directory_accounts"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CardholdersApi.get_active_directory_accounts"
      end
      # resource path
      local_var_path = '/directory_accounts'

      # query parameters
      query_params = {}
      query_params[:'directory_id'] = directory_id
      query_params[:'filter'] = filter
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryAccounts')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardholdersApi#get_active_directory_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get cardholder ID from their linked directory account
    # Returns the internal cardholder ID of a cardholder who has a linked directory account with the given credentials.
    # @param user_name Directory account username of the cardholder whose internal ID you want to look up in OnGuard.
    # @param password Directory account password of the cardholder whose internal ID you want to look up in OnGuard.
    # @param directory_id Directory ID for the directory containing the cardholder&#39;s account that you want to look up.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;. (default to false)
    # @return [CardholderFromDirectory]
    def get_cardholder_from_directory(user_name, password, directory_id, version, opts = {})
      data, _status_code, _headers = get_cardholder_from_directory_with_http_info(user_name, password, directory_id, version, opts)
      data
    end

    # Get cardholder ID from their linked directory account
    # Returns the internal cardholder ID of a cardholder who has a linked directory account with the given credentials.
    # @param user_name Directory account username of the cardholder whose internal ID you want to look up in OnGuard.
    # @param password Directory account password of the cardholder whose internal ID you want to look up in OnGuard.
    # @param directory_id Directory ID for the directory containing the cardholder&#39;s account that you want to look up.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @return [Array<(CardholderFromDirectory, Fixnum, Hash)>] CardholderFromDirectory data, response status code and response headers
    def get_cardholder_from_directory_with_http_info(user_name, password, directory_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardholdersApi.get_cardholder_from_directory ...'
      end
      # verify the required parameter 'user_name' is set
      if @api_client.config.client_side_validation && user_name.nil?
        fail ArgumentError, "Missing the required parameter 'user_name' when calling CardholdersApi.get_cardholder_from_directory"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling CardholdersApi.get_cardholder_from_directory"
      end
      # verify the required parameter 'directory_id' is set
      if @api_client.config.client_side_validation && directory_id.nil?
        fail ArgumentError, "Missing the required parameter 'directory_id' when calling CardholdersApi.get_cardholder_from_directory"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CardholdersApi.get_cardholder_from_directory"
      end
      # resource path
      local_var_path = '/cardholder_from_directory'

      # query parameters
      query_params = {}
      query_params[:'user_name'] = user_name
      query_params[:'password'] = password
      query_params[:'directory_id'] = directory_id
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardholderFromDirectory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardholdersApi#get_cardholder_from_directory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get directory accounts matching the given cardholders
    # Gets directory accounts matching the given cardholders, based on the property pairs specified by the filter.  **Note:** Depending on the Active Directory server configuration, number of users in the directory, and uniqueness of search criteria, this method may time out. On larger systems (>5000 directory accounts), restrict the number of cardholders searched to under 100 per request. 
    # @param directory_id Directory ID for the directory containing the active directory accounts that you want to find.
    # @param cardholder_ids List of cardholder IDs in the format &#x60;[1,2,3,...]&#x60;.
    # @param filter Filter format -&#x60;&lt;ADattr&gt; &lt;condition&gt; &#39;&lt;CardholderAttr&gt;&#39;&#x60;. EX: &#x60;displayname has &#39;firstname&#39; &#x60; -  Support Condition - &#x60;eq&#x60;, &#x60;has&#x60;. The condition compares AD attribute&#39;s value with Cardholder attribute&#39;s value. -  Support negative condition -    &#x60;not(&lt;ADattr.&gt; &lt;has&gt; &#39;&lt;CardholderAttr&gt;&#39;)&#x60; mean AD attribute&#39;s value doesn&#39;t contain the Cardholder attribute&#39;s value. EX: &#x60;not(displayname has &#39;lastname&#39;)&#x60;. 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;. (default to false)
    # @return [DirectoryAccountsMatchingCardholders]
    def get_directory_accounts_matching_cardholders(directory_id, cardholder_ids, filter, version, opts = {})
      data, _status_code, _headers = get_directory_accounts_matching_cardholders_with_http_info(directory_id, cardholder_ids, filter, version, opts)
      data
    end

    # Get directory accounts matching the given cardholders
    # Gets directory accounts matching the given cardholders, based on the property pairs specified by the filter.  **Note:** Depending on the Active Directory server configuration, number of users in the directory, and uniqueness of search criteria, this method may time out. On larger systems (&gt;5000 directory accounts), restrict the number of cardholders searched to under 100 per request. 
    # @param directory_id Directory ID for the directory containing the active directory accounts that you want to find.
    # @param cardholder_ids List of cardholder IDs in the format &#x60;[1,2,3,...]&#x60;.
    # @param filter Filter format -&#x60;&lt;ADattr&gt; &lt;condition&gt; &#39;&lt;CardholderAttr&gt;&#39;&#x60;. EX: &#x60;displayname has &#39;firstname&#39; &#x60; -  Support Condition - &#x60;eq&#x60;, &#x60;has&#x60;. The condition compares AD attribute&#39;s value with Cardholder attribute&#39;s value. -  Support negative condition -    &#x60;not(&lt;ADattr.&gt; &lt;has&gt; &#39;&lt;CardholderAttr&gt;&#39;)&#x60; mean AD attribute&#39;s value doesn&#39;t contain the Cardholder attribute&#39;s value. EX: &#x60;not(displayname has &#39;lastname&#39;)&#x60;. 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @return [Array<(DirectoryAccountsMatchingCardholders, Fixnum, Hash)>] DirectoryAccountsMatchingCardholders data, response status code and response headers
    def get_directory_accounts_matching_cardholders_with_http_info(directory_id, cardholder_ids, filter, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardholdersApi.get_directory_accounts_matching_cardholders ...'
      end
      # verify the required parameter 'directory_id' is set
      if @api_client.config.client_side_validation && directory_id.nil?
        fail ArgumentError, "Missing the required parameter 'directory_id' when calling CardholdersApi.get_directory_accounts_matching_cardholders"
      end
      # verify the required parameter 'cardholder_ids' is set
      if @api_client.config.client_side_validation && cardholder_ids.nil?
        fail ArgumentError, "Missing the required parameter 'cardholder_ids' when calling CardholdersApi.get_directory_accounts_matching_cardholders"
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling CardholdersApi.get_directory_accounts_matching_cardholders"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CardholdersApi.get_directory_accounts_matching_cardholders"
      end
      # resource path
      local_var_path = '/directory_accounts_matching_cardholders'

      # query parameters
      query_params = {}
      query_params[:'directory_id'] = directory_id
      query_params[:'cardholder_ids'] = @api_client.build_collection_param(cardholder_ids, :csv)
      query_params[:'filter'] = filter
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DirectoryAccountsMatchingCardholders')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardholdersApi#get_directory_accounts_matching_cardholders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the cardholder with a directory account property
    # Updates the given cardholder with the given directory account property.
    # @param cardholder_id cardholder ID.
    # @param parameter_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;. (default to false)
    # @return [UpdateCardholderWithDirectoryAccountProperty]
    def update_cardholder_with_directory_account_property(cardholder_id, parameter_name, version, opts = {})
      data, _status_code, _headers = update_cardholder_with_directory_account_property_with_http_info(cardholder_id, parameter_name, version, opts)
      data
    end

    # Update the cardholder with a directory account property
    # Updates the given cardholder with the given directory account property.
    # @param cardholder_id cardholder ID.
    # @param parameter_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @return [Array<(UpdateCardholderWithDirectoryAccountProperty, Fixnum, Hash)>] UpdateCardholderWithDirectoryAccountProperty data, response status code and response headers
    def update_cardholder_with_directory_account_property_with_http_info(cardholder_id, parameter_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardholdersApi.update_cardholder_with_directory_account_property ...'
      end
      # verify the required parameter 'cardholder_id' is set
      if @api_client.config.client_side_validation && cardholder_id.nil?
        fail ArgumentError, "Missing the required parameter 'cardholder_id' when calling CardholdersApi.update_cardholder_with_directory_account_property"
      end
      # verify the required parameter 'parameter_name' is set
      if @api_client.config.client_side_validation && parameter_name.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_name' when calling CardholdersApi.update_cardholder_with_directory_account_property"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CardholdersApi.update_cardholder_with_directory_account_property"
      end
      # resource path
      local_var_path = '/update_cardholder_with_directory_account_property'

      # query parameters
      query_params = {}
      query_params[:'cardholder_id'] = cardholder_id
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameter_name)
      auth_names = ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateCardholderWithDirectoryAccountProperty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardholdersApi#update_cardholder_with_directory_account_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
