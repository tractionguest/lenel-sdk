=begin
#OpenAccess

#This document describes the OpenAccess REST API. OpenAccess provides access to OnGuard via a RESTful web service.  ## Security / licensing headers  Each authenticated request must include the following HTTP headers:   - `Application-Id` - Each application using the OpenAccess API must have a unique application ID.   - `Session-Token` - A session token is retrieved by logging in via the `POST /authentication` operation.  ## Input parameter location - Query string or request body?  Input parameters can be placed either in the request body or in the URL, as a query parameter. The API makes no distinction and will handle them in either location. In the API specification, some parameters are described as being in the request body, and others are described as being in the query string. This is done simply for clarity in each situation, but clients of the API are free to include parameters wherever it is most convenient. **Sensitive data should always be placed in the request body and not exposed in the URL.**  ### **POST /instances** example  ``` POST /instances?type_name=Lnl_Cardholder&version=1.0 {   \"property_value_map\": {     ...   } } ```  ...is equivalent to this...  ``` POST /instances&version=1.0 {   \"type_name\": \"Lnl_Cardholder\",   \"property_value_map\": {     ...   } } ```  ## Task queuing - dealing with long running requests  Some requests might take a long time, especially requests that access external systems, such as Active Directory. Standard OpenAccess requests will time out after 30 seconds if the HTTP request doesn't time out sooner, depending on the client. Any request that you expect to run long can be queued as a task by adding a `queue` property to the request, set to `true`. For example: ``` GET /directory_accounts_matching_cardholders?directory_id=id1 &cardholder_ids=[1,2,3,4,5,6,7,8,9,10] &filter=displayname has 'firstname' and displayname has 'lastname' &queue=true &version=1.0 ```  When a request is queued in this way, OpenAccess will queue a task for execution and return a 202 (Accepted) HTTP status code and a response identical to `GET /queue/{id}`. For example: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"status\": \"pending\",   \"version\": \"1.0\" } ```  The `id` property indicates the ID of the queued task, which can be used to check the status of the task: ``` GET /queue/5c4b7890-ee73-4199-b3d3-366003eb8ca1?version=1.0 ```  When the task is complete, the response will include the response to the queued request: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"response\": {     ...   },   \"status\": \"complete\",   \"version\": \"1.0\" } ```  The response can be retrieved any number of times until the task is deleted. A completed task can be deleted with `DELETE /queue/{id}` or it will be deleted automatically after 1 hour.  **Note:** Even though you can queue any request, it's only recommended when a request is expected to run long, like `GET /directory_accounts` and `GET /directory_accounts_matching_cardholders`.  ## Samples  There are several sample applications that demonstrate various aspects of the API.  ### [Cardholder Search](/api/access/onguard/openaccess/samples/Cardholder Search) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting cardholders and photos - `GET /instances`  ### [Command and Control](/api/access/onguard/openaccess/samples/Command and Control) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting panels and readers - `GET /instances` - Updating hardware status, getting/setting reader mode, and opening doors - `POST /execute_method`  ### [Event Subscriber](/api/access/onguard/openaccess/samples/Event Subscriber) - Getting directories used for authentication - `GET /directories` (not used within every event subscriber sample) - Login and logout - `POST /authentication` and `DELETE /authentication` - Adding/modifying/disabling event subscriptions - `POST /event_subscriptions`, `PUT /event_subscriptions`, and `DELETE /event_subscriptions` - Using the Web Event Bridge to receive events via WebSocket 

OpenAPI spec version: 8.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.67
=end

module LenelSdk
  class InstancesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add device group
    # Adds a device group.
    # @param body 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [AddModifyDeviceGroupResponse]
    def add_device_group(body, version, opts = {})
      data, _status_code, _headers = add_device_group_with_http_info(body, version, opts)
      data
    end

    # Add device group
    # Adds a device group.
    # @param body 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(AddModifyDeviceGroupResponse, Integer, Hash)>] AddModifyDeviceGroupResponse data, response status code and response headers
    def add_device_group_with_http_info(body, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.add_device_group ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstancesApi.add_device_group"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.add_device_group"
      end
      # resource path
      local_var_path = '/device_group'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AddModifyDeviceGroupResponse' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#add_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an instance
    # Adds an instance of the given type.
    # @param body The new instance.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Instance]
    def add_instance(body, type_name, version, opts = {})
      data, _status_code, _headers = add_instance_with_http_info(body, type_name, version, opts)
      data
    end

    # Add an instance
    # Adds an instance of the given type.
    # @param body The new instance.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(Instance, Integer, Hash)>] Instance data, response status code and response headers
    def add_instance_with_http_info(body, type_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.add_instance ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstancesApi.add_instance"
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling InstancesApi.add_instance"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.add_instance"
      end
      # resource path
      local_var_path = '/instances'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type_name'] = type_name
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Instance' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#add_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete device group
    # Deletes device group with the given ID.
    # @param id ID of device group to be deleted.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [SharedResponseDefinition]
    def delete_device_group(id, version, opts = {})
      data, _status_code, _headers = delete_device_group_with_http_info(id, version, opts)
      data
    end

    # Delete device group
    # Deletes device group with the given ID.
    # @param id ID of device group to be deleted.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(SharedResponseDefinition, Integer, Hash)>] SharedResponseDefinition data, response status code and response headers
    def delete_device_group_with_http_info(id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.delete_device_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstancesApi.delete_device_group"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.delete_device_group"
      end
      # resource path
      local_var_path = '/device_group'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ID'] = id
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SharedResponseDefinition' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#delete_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an instance
    # Deletes an instance of the given type.
    # @param body The instance to delete, with only key properties required.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [SharedResponseDefinition]
    def delete_instance(body, type_name, version, opts = {})
      data, _status_code, _headers = delete_instance_with_http_info(body, type_name, version, opts)
      data
    end

    # Delete an instance
    # Deletes an instance of the given type.
    # @param body The instance to delete, with only key properties required.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force 
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(SharedResponseDefinition, Integer, Hash)>] SharedResponseDefinition data, response status code and response headers
    def delete_instance_with_http_info(body, type_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.delete_instance ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstancesApi.delete_instance"
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling InstancesApi.delete_instance"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.delete_instance"
      end
      # resource path
      local_var_path = '/instances'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type_name'] = type_name
      query_params[:'version'] = version
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'SharedResponseDefinition' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#delete_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a specific badge print request
    # Delete a request to print the badge.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param badge_print_request_id The badge print request ID represents a unique identifier associated with a badge print request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body Pass an empty request body.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [nil]
    def delete_print_request(version, badge_print_request_id, opts = {})
      delete_print_request_with_http_info(version, badge_print_request_id, opts)
      nil
    end

    # Delete a specific badge print request
    # Delete a request to print the badge.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param badge_print_request_id The badge print request ID represents a unique identifier associated with a badge print request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body Pass an empty request body.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_print_request_with_http_info(version, badge_print_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.delete_print_request ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.delete_print_request"
      end
      # verify the required parameter 'badge_print_request_id' is set
      if @api_client.config.client_side_validation && badge_print_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'badge_print_request_id' when calling InstancesApi.delete_print_request"
      end
      # resource path
      local_var_path = '/badge/{badge_print_request_id}/print_request'.sub('{' + 'badge_print_request_id' + '}', badge_print_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#delete_print_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Execute method
    # Executes a method on an instance.
    # @param body The execute method parameters.
    # @param type_name The type for which to execute a method.
    # @param method_name The name of the method to execute.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [ExecuteMethodResults]
    def execute_method(body, type_name, method_name, version, opts = {})
      data, _status_code, _headers = execute_method_with_http_info(body, type_name, method_name, version, opts)
      data
    end

    # Execute method
    # Executes a method on an instance.
    # @param body The execute method parameters.
    # @param type_name The type for which to execute a method.
    # @param method_name The name of the method to execute.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(ExecuteMethodResults, Integer, Hash)>] ExecuteMethodResults data, response status code and response headers
    def execute_method_with_http_info(body, type_name, method_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.execute_method ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstancesApi.execute_method"
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling InstancesApi.execute_method"
      end
      # verify the required parameter 'method_name' is set
      if @api_client.config.client_side_validation && method_name.nil?
        fail ArgumentError, "Missing the required parameter 'method_name' when calling InstancesApi.execute_method"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.execute_method"
      end
      # resource path
      local_var_path = '/execute_method'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type_name'] = type_name
      query_params[:'method_name'] = method_name
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ExecuteMethodResults' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#execute_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get access panels list with certificates and users
    # This is extended view of Lnl_Panel instances with TLS and Peer certificates info and controller users list.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter based on Lnl_panel type name properties
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [GetAccessPanelsWithCertsAndUsersResponse]
    def get_access_panels_with_certs_and_users(version, opts = {})
      data, _status_code, _headers = get_access_panels_with_certs_and_users_with_http_info(version, opts)
      data
    end

    # Get access panels list with certificates and users
    # This is extended view of Lnl_Panel instances with TLS and Peer certificates info and controller users list.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter based on Lnl_panel type name properties
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(GetAccessPanelsWithCertsAndUsersResponse, Integer, Hash)>] GetAccessPanelsWithCertsAndUsersResponse data, response status code and response headers
    def get_access_panels_with_certs_and_users_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_access_panels_with_certs_and_users ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_access_panels_with_certs_and_users"
      end
      # resource path
      local_var_path = '/access_panel_with_certs_and_users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetAccessPanelsWithCertsAndUsersResponse' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_access_panels_with_certs_and_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Advanced cardholder search
    # Performs an advanced cardholder search, optionally searching on Badge fields.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_load_badge A flag indicating whether to load the badges assigned to cardholders in the response.
    # @option opts [BOOLEAN] :auto_load_multimedia_object A flag indicating whether to load the multimedia objects such as pictures and signatures assigned to cardholders in the response.
    # @option opts [BOOLEAN] :auto_load_access_level A flag indicating whether to load the access levels assigned to cardholders in the response.
    # @option opts [BOOLEAN] :auto_load_reader A flag indicating whether to load the readers assigned to access levels in the response.
    # @option opts [BOOLEAN] :auto_load_timezone A flag indicating whether to load the timezones assigned to access levels in the response.
    # @option opts [BOOLEAN] :auto_load_timezone_interval A flag indicating whether to load the timezone intervals related to timezone.
    # @option opts [String] :cardholder_filter The filter based on Cardholder properties.
    # @option opts [String] :badge_filter The filter based on Badge properties.
    # @option opts [BOOLEAN] :sum_badge_filter A flag indicating whether to join cardholder and badge filter with OR instead of AND operator.
    # @option opts [BOOLEAN] :has_badges Boolean search for the presence of a Badge.
    # @option opts [BOOLEAN] :has_only_inactive_badges Boolean search for Cardholders which have only inactive badges.
    # @option opts [String] :last_activity_filter The filter based on Lnl_BadgeLastLocation properties.
    # @option opts [BOOLEAN] :has_photo Boolean search for the presence of a cardholder photo.
    # @option opts [BOOLEAN] :has_signature Boolean search for the presence of a cardholder signature.
    # @option opts [BOOLEAN] :has_any_directory_account Boolean search for the presence of a cardholder directory account.
    # @option opts [String] :access_level_filter The filter based on Access Level properties.
    # @option opts [String] :access_level_list A list of access level IDs for which to search cardholders. For example: &#x60;[1,2,3]&#x60;. This parameter is interpreted based on &#x60;access_level_search_type&#x60;. 
    # @option opts [String] :access_level_search_type The type of access level search to apply. This parameter describes how to interpret &#x60;access_level_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds cardholders with ***any of*** the access levels in   &#x60;access_level_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds cardholders with ***none of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds cardholders with ***all of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds cardholders with ***exactly*** the access levels in   &#x60;access_level_list&#x60; (all of the access levels and no others).  (default to any_of)
    # @option opts [String] :reader_filter The filter based on Reader properties.
    # @option opts [String] :reader_name_list A list of reader names for which to search cardholders. For example: &#x60;[name1,name2,name3]&#x60;. This parameter is interpreted based on &#x60;reader_name_list_search_type&#x60;. 
    # @option opts [String] :reader_name_list_search_type The type of reader name list search to apply. This parameter describes how to interpret &#x60;reader_name_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds cardholders with ***any of*** the readers in   &#x60;reader_name_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds cardholders with ***none of*** the readers in   &#x60;reader_name_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds cardholders with ***all of*** the readers in   &#x60;reader_name_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds cardholders with ***exactly*** the readers in   &#x60;reader_name_list&#x60; (all of the access levels and no others).  (default to any_of)
    # @option opts [String] :timezone_name_list A list of timezone names for which to search cardholders. For example: &#x60;[name1,name2,name3]&#x60;. This parameter is interpreted based on &#x60;timezone_name_list_search_type&#x60;. 
    # @option opts [String] :timezone_name_list_search_type The type of timezone name list search to apply. This parameter describes how to interpret &#x60;timezone_name_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds cardholders with ***any of*** the timezones in   &#x60;timezone_name_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds cardholders with ***none of*** the timezones in   &#x60;timezone_name_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds cardholders with ***all of*** the timezones in   &#x60;timezone_name_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds cardholders with ***exactly*** the timezones in   &#x60;timezone_name_list&#x60; (all of the access levels and no others).  (default to any_of)
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [PagedInstances]
    def get_cardholder_search(version, opts = {})
      data, _status_code, _headers = get_cardholder_search_with_http_info(version, opts)
      data
    end

    # Advanced cardholder search
    # Performs an advanced cardholder search, optionally searching on Badge fields.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_load_badge A flag indicating whether to load the badges assigned to cardholders in the response.
    # @option opts [BOOLEAN] :auto_load_multimedia_object A flag indicating whether to load the multimedia objects such as pictures and signatures assigned to cardholders in the response.
    # @option opts [BOOLEAN] :auto_load_access_level A flag indicating whether to load the access levels assigned to cardholders in the response.
    # @option opts [BOOLEAN] :auto_load_reader A flag indicating whether to load the readers assigned to access levels in the response.
    # @option opts [BOOLEAN] :auto_load_timezone A flag indicating whether to load the timezones assigned to access levels in the response.
    # @option opts [BOOLEAN] :auto_load_timezone_interval A flag indicating whether to load the timezone intervals related to timezone.
    # @option opts [String] :cardholder_filter The filter based on Cardholder properties.
    # @option opts [String] :badge_filter The filter based on Badge properties.
    # @option opts [BOOLEAN] :sum_badge_filter A flag indicating whether to join cardholder and badge filter with OR instead of AND operator.
    # @option opts [BOOLEAN] :has_badges Boolean search for the presence of a Badge.
    # @option opts [BOOLEAN] :has_only_inactive_badges Boolean search for Cardholders which have only inactive badges.
    # @option opts [String] :last_activity_filter The filter based on Lnl_BadgeLastLocation properties.
    # @option opts [BOOLEAN] :has_photo Boolean search for the presence of a cardholder photo.
    # @option opts [BOOLEAN] :has_signature Boolean search for the presence of a cardholder signature.
    # @option opts [BOOLEAN] :has_any_directory_account Boolean search for the presence of a cardholder directory account.
    # @option opts [String] :access_level_filter The filter based on Access Level properties.
    # @option opts [String] :access_level_list A list of access level IDs for which to search cardholders. For example: &#x60;[1,2,3]&#x60;. This parameter is interpreted based on &#x60;access_level_search_type&#x60;. 
    # @option opts [String] :access_level_search_type The type of access level search to apply. This parameter describes how to interpret &#x60;access_level_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds cardholders with ***any of*** the access levels in   &#x60;access_level_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds cardholders with ***none of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds cardholders with ***all of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds cardholders with ***exactly*** the access levels in   &#x60;access_level_list&#x60; (all of the access levels and no others). 
    # @option opts [String] :reader_filter The filter based on Reader properties.
    # @option opts [String] :reader_name_list A list of reader names for which to search cardholders. For example: &#x60;[name1,name2,name3]&#x60;. This parameter is interpreted based on &#x60;reader_name_list_search_type&#x60;. 
    # @option opts [String] :reader_name_list_search_type The type of reader name list search to apply. This parameter describes how to interpret &#x60;reader_name_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds cardholders with ***any of*** the readers in   &#x60;reader_name_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds cardholders with ***none of*** the readers in   &#x60;reader_name_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds cardholders with ***all of*** the readers in   &#x60;reader_name_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds cardholders with ***exactly*** the readers in   &#x60;reader_name_list&#x60; (all of the access levels and no others). 
    # @option opts [String] :timezone_name_list A list of timezone names for which to search cardholders. For example: &#x60;[name1,name2,name3]&#x60;. This parameter is interpreted based on &#x60;timezone_name_list_search_type&#x60;. 
    # @option opts [String] :timezone_name_list_search_type The type of timezone name list search to apply. This parameter describes how to interpret &#x60;timezone_name_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds cardholders with ***any of*** the timezones in   &#x60;timezone_name_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds cardholders with ***none of*** the timezones in   &#x60;timezone_name_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds cardholders with ***all of*** the timezones in   &#x60;timezone_name_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds cardholders with ***exactly*** the timezones in   &#x60;timezone_name_list&#x60; (all of the access levels and no others). 
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(PagedInstances, Integer, Hash)>] PagedInstances data, response status code and response headers
    def get_cardholder_search_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_cardholder_search ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_cardholder_search"
      end
      if @api_client.config.client_side_validation && opts[:'access_level_search_type'] && !['any_of', 'none_of', 'all_of', 'exactly'].include?(opts[:'access_level_search_type'])
        fail ArgumentError, 'invalid value for "access_level_search_type", must be one of any_of, none_of, all_of, exactly'
      end
      if @api_client.config.client_side_validation && opts[:'reader_name_list_search_type'] && !['any_of', 'none_of', 'all_of', 'exactly'].include?(opts[:'reader_name_list_search_type'])
        fail ArgumentError, 'invalid value for "reader_name_list_search_type", must be one of any_of, none_of, all_of, exactly'
      end
      if @api_client.config.client_side_validation && opts[:'timezone_name_list_search_type'] && !['any_of', 'none_of', 'all_of', 'exactly'].include?(opts[:'timezone_name_list_search_type'])
        fail ArgumentError, 'invalid value for "timezone_name_list_search_type", must be one of any_of, none_of, all_of, exactly'
      end
      # resource path
      local_var_path = '/cardholders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'auto_load_badge'] = opts[:'auto_load_badge'] if !opts[:'auto_load_badge'].nil?
      query_params[:'auto_load_multimedia_object'] = opts[:'auto_load_multimedia_object'] if !opts[:'auto_load_multimedia_object'].nil?
      query_params[:'auto_load_access_level'] = opts[:'auto_load_access_level'] if !opts[:'auto_load_access_level'].nil?
      query_params[:'auto_load_reader'] = opts[:'auto_load_reader'] if !opts[:'auto_load_reader'].nil?
      query_params[:'auto_load_timezone'] = opts[:'auto_load_timezone'] if !opts[:'auto_load_timezone'].nil?
      query_params[:'auto_load_timezone_interval'] = opts[:'auto_load_timezone_interval'] if !opts[:'auto_load_timezone_interval'].nil?
      query_params[:'cardholder_filter'] = opts[:'cardholder_filter'] if !opts[:'cardholder_filter'].nil?
      query_params[:'badge_filter'] = opts[:'badge_filter'] if !opts[:'badge_filter'].nil?
      query_params[:'sum_badge_filter'] = opts[:'sum_badge_filter'] if !opts[:'sum_badge_filter'].nil?
      query_params[:'has_badges'] = opts[:'has_badges'] if !opts[:'has_badges'].nil?
      query_params[:'has_only_inactive_badges'] = opts[:'has_only_inactive_badges'] if !opts[:'has_only_inactive_badges'].nil?
      query_params[:'last_activity_filter'] = opts[:'last_activity_filter'] if !opts[:'last_activity_filter'].nil?
      query_params[:'has_photo'] = opts[:'has_photo'] if !opts[:'has_photo'].nil?
      query_params[:'has_signature'] = opts[:'has_signature'] if !opts[:'has_signature'].nil?
      query_params[:'has_any_directory_account'] = opts[:'has_any_directory_account'] if !opts[:'has_any_directory_account'].nil?
      query_params[:'access_level_filter'] = opts[:'access_level_filter'] if !opts[:'access_level_filter'].nil?
      query_params[:'access_level_list'] = opts[:'access_level_list'] if !opts[:'access_level_list'].nil?
      query_params[:'access_level_search_type'] = opts[:'access_level_search_type'] if !opts[:'access_level_search_type'].nil?
      query_params[:'reader_filter'] = opts[:'reader_filter'] if !opts[:'reader_filter'].nil?
      query_params[:'reader_name_list'] = opts[:'reader_name_list'] if !opts[:'reader_name_list'].nil?
      query_params[:'reader_name_list_search_type'] = opts[:'reader_name_list_search_type'] if !opts[:'reader_name_list_search_type'].nil?
      query_params[:'timezone_name_list'] = opts[:'timezone_name_list'] if !opts[:'timezone_name_list'].nil?
      query_params[:'timezone_name_list_search_type'] = opts[:'timezone_name_list_search_type'] if !opts[:'timezone_name_list_search_type'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PagedInstances' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_cardholder_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get count
    # Gets the number of instances of a given type.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [InlineResponse2009]
    def get_count(type_name, version, opts = {})
      data, _status_code, _headers = get_count_with_http_info(type_name, version, opts)
      data
    end

    # Get count
    # Gets the number of instances of a given type.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(InlineResponse2009, Integer, Hash)>] InlineResponse2009 data, response status code and response headers
    def get_count_with_http_info(type_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_count ...'
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling InstancesApi.get_count"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_count"
      end
      # resource path
      local_var_path = '/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type_name'] = type_name
      query_params[:'version'] = version
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2009' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get device groups
    # Used to retrieve a page of device groups.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter based on device group properties.
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [GetDeviceGroupsResponse]
    def get_device_groups(version, opts = {})
      data, _status_code, _headers = get_device_groups_with_http_info(version, opts)
      data
    end

    # Get device groups
    # Used to retrieve a page of device groups.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter based on device group properties.
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(GetDeviceGroupsResponse, Integer, Hash)>] GetDeviceGroupsResponse data, response status code and response headers
    def get_device_groups_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_device_groups ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_device_groups"
      end
      # resource path
      local_var_path = '/device_groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetDeviceGroupsResponse' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_device_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get instances
    # Gets instances of the given type.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [BOOLEAN] :bulk_export Bulk export feature activation (requires ***version&gt;&#x3D;1.9***). 
    # @option opts [String] :binary_encoding Encoding method for binary data, ***base64*** by default.          
    # @option opts [String] :data_separator One or more special characters used to separate fields in a line, ***~*** (tilde) by default. 
    # @option opts [String] :select List of fields to download, separated by commas. 
    # @option opts [BOOLEAN] :null_value_writing Database &#x60;NULL&#x60; value handling in resulting csv file, ***false*** by default: - &#x60;false&#x60; - columns with null value will be skipped - &#x60;true&#x60;  - columns with null value will be marked as &#x60;&lt;null&gt;&#x60; 
    # @option opts [Integer] :chunk_size Maximum size of a single result file, expressed in MiB (the size applies to the resulting file before data compression). Unlimited if set to 0.          
    # @option opts [Integer] :sql_query_timeout Timeout for SQL query request in seconds.          
    # @option opts [Integer] :max_thread_count Number of tasks used to process a single request. Limited by MaxProcessingThreadCount parameter (20 by default).         
    # @option opts [BOOLEAN] :output_compression Enable resulting csv file compression, ***false*** by default. 
    # @return [PagedInstances]
    def get_instances(type_name, version, opts = {})
      data, _status_code, _headers = get_instances_with_http_info(type_name, version, opts)
      data
    end

    # Get instances
    # Gets instances of the given type.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [BOOLEAN] :bulk_export Bulk export feature activation (requires ***version&gt;&#x3D;1.9***). 
    # @option opts [String] :binary_encoding Encoding method for binary data, ***base64*** by default.          
    # @option opts [String] :data_separator One or more special characters used to separate fields in a line, ***~*** (tilde) by default. 
    # @option opts [String] :select List of fields to download, separated by commas. 
    # @option opts [BOOLEAN] :null_value_writing Database &#x60;NULL&#x60; value handling in resulting csv file, ***false*** by default: - &#x60;false&#x60; - columns with null value will be skipped - &#x60;true&#x60;  - columns with null value will be marked as &#x60;&lt;null&gt;&#x60; 
    # @option opts [Integer] :chunk_size Maximum size of a single result file, expressed in MiB (the size applies to the resulting file before data compression). Unlimited if set to 0.          
    # @option opts [Integer] :sql_query_timeout Timeout for SQL query request in seconds.          
    # @option opts [Integer] :max_thread_count Number of tasks used to process a single request. Limited by MaxProcessingThreadCount parameter (20 by default).         
    # @option opts [BOOLEAN] :output_compression Enable resulting csv file compression, ***false*** by default. 
    # @return [Array<(PagedInstances, Integer, Hash)>] PagedInstances data, response status code and response headers
    def get_instances_with_http_info(type_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_instances ...'
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling InstancesApi.get_instances"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_instances"
      end
      if @api_client.config.client_side_validation && opts[:'binary_encoding'] && !['base64', 'hex'].include?(opts[:'binary_encoding'])
        fail ArgumentError, 'invalid value for "binary_encoding", must be one of base64, hex'
      end
      # resource path
      local_var_path = '/instances'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type_name'] = type_name
      query_params[:'version'] = version
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'bulk_export'] = opts[:'bulk_export'] if !opts[:'bulk_export'].nil?
      query_params[:'binary_encoding'] = opts[:'binary_encoding'] if !opts[:'binary_encoding'].nil?
      query_params[:'data_separator'] = opts[:'data_separator'] if !opts[:'data_separator'].nil?
      query_params[:'select'] = opts[:'select'] if !opts[:'select'].nil?
      query_params[:'null_value_writing'] = opts[:'null_value_writing'] if !opts[:'null_value_writing'].nil?
      query_params[:'chunk_size'] = opts[:'chunk_size'] if !opts[:'chunk_size'].nil?
      query_params[:'sql_query_timeout'] = opts[:'sql_query_timeout'] if !opts[:'sql_query_timeout'].nil?
      query_params[:'max_thread_count'] = opts[:'max_thread_count'] if !opts[:'max_thread_count'].nil?
      query_params[:'output_compression'] = opts[:'output_compression'] if !opts[:'output_compression'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PagedInstances' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get logged events
    # Used to retrieve a page of logged events and their relevant properties.
    # @param filter The filter based on logged event properties.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :monitoring_zone_id id of selected monitoring zone
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [GetLoggedEvents]
    def get_logged_events(filter, version, opts = {})
      data, _status_code, _headers = get_logged_events_with_http_info(filter, version, opts)
      data
    end

    # Get logged events
    # Used to retrieve a page of logged events and their relevant properties.
    # @param filter The filter based on logged event properties.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :monitoring_zone_id id of selected monitoring zone
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(GetLoggedEvents, Integer, Hash)>] GetLoggedEvents data, response status code and response headers
    def get_logged_events_with_http_info(filter, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_logged_events ...'
      end
      # verify the required parameter 'filter' is set
      if @api_client.config.client_side_validation && filter.nil?
        fail ArgumentError, "Missing the required parameter 'filter' when calling InstancesApi.get_logged_events"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_logged_events"
      end
      # resource path
      local_var_path = '/logged_events'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = filter
      query_params[:'version'] = version
      query_params[:'monitoring_zone_id'] = opts[:'monitoring_zone_id'] if !opts[:'monitoring_zone_id'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetLoggedEvents' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_logged_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # A list of mobile devices for a badge.
    # Gets a list of mobile devices for a person associated with a badge. This list comes from the mobile credentialing services associated with the badge type of this badge.
    # @param badgekey The badgekey of the badge assigned to the mobile devices you want to get from OnGuard.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [BadgeMobileDevices]
    def get_mobile_devices(badgekey, version, opts = {})
      data, _status_code, _headers = get_mobile_devices_with_http_info(badgekey, version, opts)
      data
    end

    # A list of mobile devices for a badge.
    # Gets a list of mobile devices for a person associated with a badge. This list comes from the mobile credentialing services associated with the badge type of this badge.
    # @param badgekey The badgekey of the badge assigned to the mobile devices you want to get from OnGuard.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(BadgeMobileDevices, Integer, Hash)>] BadgeMobileDevices data, response status code and response headers
    def get_mobile_devices_with_http_info(badgekey, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_mobile_devices ...'
      end
      # verify the required parameter 'badgekey' is set
      if @api_client.config.client_side_validation && badgekey.nil?
        fail ArgumentError, "Missing the required parameter 'badgekey' when calling InstancesApi.get_mobile_devices"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_mobile_devices"
      end
      # resource path
      local_var_path = '/badge/{badgekey}/mobile_devices'.sub('{' + 'badgekey' + '}', badgekey.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BadgeMobileDevices' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_mobile_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a specific badge print request
    # Get the status of a print request for the badge.
    # @param badge_print_request_id The badge print request ID represents a unique identifier associated with a badge print request.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [BadgePrintRequestResponse]
    def get_print_request(badge_print_request_id, version, opts = {})
      data, _status_code, _headers = get_print_request_with_http_info(badge_print_request_id, version, opts)
      data
    end

    # Retrieve a specific badge print request
    # Get the status of a print request for the badge.
    # @param badge_print_request_id The badge print request ID represents a unique identifier associated with a badge print request.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(BadgePrintRequestResponse, Integer, Hash)>] BadgePrintRequestResponse data, response status code and response headers
    def get_print_request_with_http_info(badge_print_request_id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_print_request ...'
      end
      # verify the required parameter 'badge_print_request_id' is set
      if @api_client.config.client_side_validation && badge_print_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'badge_print_request_id' when calling InstancesApi.get_print_request"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_print_request"
      end
      # resource path
      local_var_path = '/badge/{badge_print_request_id}/print_request'.sub('{' + 'badge_print_request_id' + '}', badge_print_request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BadgePrintRequestResponse' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_print_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get type details
    # Gets the details of a specific type.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Type]
    def get_type(type_name, version, opts = {})
      data, _status_code, _headers = get_type_with_http_info(type_name, version, opts)
      data
    end

    # Get type details
    # Gets the details of a specific type.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(Type, Integer, Hash)>] Type data, response status code and response headers
    def get_type_with_http_info(type_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_type ...'
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling InstancesApi.get_type"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_type"
      end
      # resource path
      local_var_path = '/type'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type_name'] = type_name
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Type' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get type list
    # Gets a list of the supported instance types.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Types]
    def get_types(version, opts = {})
      data, _status_code, _headers = get_types_with_http_info(version, opts)
      data
    end

    # Get type list
    # Gets a list of the supported instance types.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(Types, Integer, Hash)>] Types data, response status code and response headers
    def get_types_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_types ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_types"
      end
      # resource path
      local_var_path = '/types'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Types' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get video recorder authentication data
    # Retrieves the authentication token for a Lenel NVR. This token is used for authentication and authorization against LNVR Services.
    # @param id The panel ID of the recorder for which the authentication data is being requested.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @option opts [String] :authentication_data improve audit record creation for get video_recorder auth data api.For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [VideoRecorderAuthenticationData]
    def get_video_recorder_authentication_data(id, version, opts = {})
      data, _status_code, _headers = get_video_recorder_authentication_data_with_http_info(id, version, opts)
      data
    end

    # Get video recorder authentication data
    # Retrieves the authentication token for a Lenel NVR. This token is used for authentication and authorization against LNVR Services.
    # @param id The panel ID of the recorder for which the authentication data is being requested.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @option opts [String] :authentication_data improve audit record creation for get video_recorder auth data api.For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(VideoRecorderAuthenticationData, Integer, Hash)>] VideoRecorderAuthenticationData data, response status code and response headers
    def get_video_recorder_authentication_data_with_http_info(id, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_video_recorder_authentication_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstancesApi.get_video_recorder_authentication_data"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_video_recorder_authentication_data"
      end
      # resource path
      local_var_path = '/video_recorder/{id}/auth_data'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?
      query_params[:'authentication_data'] = opts[:'authentication_data'] if !opts[:'authentication_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'VideoRecorderAuthenticationData' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_video_recorder_authentication_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get video recorder credentials
    # Retrieves username in plain text and hash of credentials given a panel id for secure connection between MM and recorders.
    # @param id The panel ID of the recorder for which credentials are required.
    # @param realm_value A string that is passed from MM
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [VideoRecorderCredentials]
    def get_video_recorder_credentials(id, realm_value, version, opts = {})
      data, _status_code, _headers = get_video_recorder_credentials_with_http_info(id, realm_value, version, opts)
      data
    end

    # Get video recorder credentials
    # Retrieves username in plain text and hash of credentials given a panel id for secure connection between MM and recorders.
    # @param id The panel ID of the recorder for which credentials are required.
    # @param realm_value A string that is passed from MM
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(VideoRecorderCredentials, Integer, Hash)>] VideoRecorderCredentials data, response status code and response headers
    def get_video_recorder_credentials_with_http_info(id, realm_value, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_video_recorder_credentials ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstancesApi.get_video_recorder_credentials"
      end
      # verify the required parameter 'realm_value' is set
      if @api_client.config.client_side_validation && realm_value.nil?
        fail ArgumentError, "Missing the required parameter 'realm_value' when calling InstancesApi.get_video_recorder_credentials"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_video_recorder_credentials"
      end
      # resource path
      local_var_path = '/video_recorder/{id}/credentials'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'realm_value'] = realm_value
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'VideoRecorderCredentials' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_video_recorder_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get video recorders
    # Used to retrieve a page of video recorders and their relevant properties. 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter based on video recorder properties.
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [GetVideoRecorders]
    def get_video_recorders(version, opts = {})
      data, _status_code, _headers = get_video_recorders_with_http_info(version, opts)
      data
    end

    # Get video recorders
    # Used to retrieve a page of video recorders and their relevant properties. 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter based on video recorder properties.
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(GetVideoRecorders, Integer, Hash)>] GetVideoRecorders data, response status code and response headers
    def get_video_recorders_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_video_recorders ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_video_recorders"
      end
      # resource path
      local_var_path = '/video_recorders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetVideoRecorders' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_video_recorders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get VisitEvent status
    # Used to retrieve a page of VisitEvents with their status.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter based on Lnl_VisitEvent properties.
    # @option opts [Array<String>] :visitevent_status_list The list of visitevent status names to search. For example: &#x60;[\&quot;active\&quot;,\&quot;finished\&quot;]&#x60;. Allowed values: &#x60;\&quot;scheduled\&quot;&#x60;, &#x60;\&quot;active\&quot;&#x60;, &#x60;\&quot;finished\&quot;&#x60;. 
    # @option opts [Array<String>] :visit_status_list The list of visit status names to search. For example: &#x60;[\&quot;active\&quot;,\&quot;overstayed\&quot;]&#x60;. Allowed values: &#x60;\&quot;scheduled\&quot;&#x60;, &#x60;\&quot;late\&quot;&#x60;, &#x60;\&quot;active\&quot;&#x60;, &#x60;\&quot;overstayed\&quot;&#x60;, &#x60;\&quot;finished\&quot;&#x60;. 
    # @option opts [Array<Integer>] :visitor_id_list The list of visitor IDs in the format: &#x60;[1,2,3,...]&#x60;. Allows to search only statuses of those visit events in which the selected visitor(s) take a part. 
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [GetVisitEventStatus]
    def get_visit_event_status(version, opts = {})
      data, _status_code, _headers = get_visit_event_status_with_http_info(version, opts)
      data
    end

    # Get VisitEvent status
    # Used to retrieve a page of VisitEvents with their status.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter The filter based on Lnl_VisitEvent properties.
    # @option opts [Array<String>] :visitevent_status_list The list of visitevent status names to search. For example: &#x60;[\&quot;active\&quot;,\&quot;finished\&quot;]&#x60;. Allowed values: &#x60;\&quot;scheduled\&quot;&#x60;, &#x60;\&quot;active\&quot;&#x60;, &#x60;\&quot;finished\&quot;&#x60;. 
    # @option opts [Array<String>] :visit_status_list The list of visit status names to search. For example: &#x60;[\&quot;active\&quot;,\&quot;overstayed\&quot;]&#x60;. Allowed values: &#x60;\&quot;scheduled\&quot;&#x60;, &#x60;\&quot;late\&quot;&#x60;, &#x60;\&quot;active\&quot;&#x60;, &#x60;\&quot;overstayed\&quot;&#x60;, &#x60;\&quot;finished\&quot;&#x60;. 
    # @option opts [Array<Integer>] :visitor_id_list The list of visitor IDs in the format: &#x60;[1,2,3,...]&#x60;. Allows to search only statuses of those visit events in which the selected visitor(s) take a part. 
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(GetVisitEventStatus, Integer, Hash)>] GetVisitEventStatus data, response status code and response headers
    def get_visit_event_status_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_visit_event_status ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_visit_event_status"
      end
      # resource path
      local_var_path = '/visitevent_status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'visitevent_status_list'] = @api_client.build_collection_param(opts[:'visitevent_status_list'], :csv) if !opts[:'visitevent_status_list'].nil?
      query_params[:'visit_status_list'] = @api_client.build_collection_param(opts[:'visit_status_list'], :csv) if !opts[:'visit_status_list'].nil?
      query_params[:'visitor_id_list'] = @api_client.build_collection_param(opts[:'visitor_id_list'], :csv) if !opts[:'visitor_id_list'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetVisitEventStatus' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_visit_event_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Advanced visitor search
    # Performs an advanced visitor search, optionally searching on Badge fields.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_load_badge A flag indicating whether to load the badges assigned to visitors in the response.
    # @option opts [BOOLEAN] :auto_load_multimedia_object A flag indicating whether to load the multimedia objects such as pictures and signatures assigned to visitors in the response.
    # @option opts [BOOLEAN] :auto_load_access_level A flag indicating whether to load the access levels assigned to visitors in the response.
    # @option opts [BOOLEAN] :auto_load_reader A flag indicating whether to load the readers assigned to access levels in the response.
    # @option opts [BOOLEAN] :auto_load_timezone A flag indicating whether to load the timezones assigned to access levels in the response.
    # @option opts [BOOLEAN] :auto_load_timezone_interval A flag indicating whether to load the timezone intervals related to timezone.
    # @option opts [String] :visitor_filter The filter based on Visitor properties.
    # @option opts [String] :badge_filter The filter based on Badge properties.
    # @option opts [BOOLEAN] :sum_badge_filter A flag indicating whether to join visitor and badge filter with OR instead of AND operator.
    # @option opts [BOOLEAN] :has_badges Boolean search for the presence of a Badge.
    # @option opts [BOOLEAN] :has_photo Boolean search for the presence of a visitor photo.
    # @option opts [BOOLEAN] :has_signature Boolean search for the presence of a visitor signature.
    # @option opts [BOOLEAN] :has_any_directory_account Boolean search for the presence of a visitor directory account.
    # @option opts [String] :access_level_filter The filter based on Access Level properties.
    # @option opts [String] :access_level_list A list of access level IDs for which to search visitors. For example: &#x60;[1,2,3]&#x60;. This parameter is interpreted based on &#x60;access_level_search_type&#x60;. 
    # @option opts [String] :access_level_search_type The type of access level search to apply. This parameter describes how to interpret &#x60;access_level_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds visitors with ***any of*** the access levels in   &#x60;access_level_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds visitors with ***none of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds visitors with ***all of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds visitors with ***exactly*** the access levels in   &#x60;access_level_list&#x60; (all of the access levels and no others).  (default to any_of)
    # @option opts [String] :reader_filter The filter based on Reader properties.
    # @option opts [String] :reader_name_list A list of reader names for which to search visitors. For example: &#x60;[name1,name2,name3]&#x60;. This parameter is interpreted based on &#x60;reader_name_list_search_type&#x60;. 
    # @option opts [String] :reader_name_list_search_type The type of reader name list search to apply. This parameter describes how to interpret &#x60;reader_name_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds visitors with ***any of*** the readers in   &#x60;reader_name_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds visitors with ***none of*** the readers in   &#x60;reader_name_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds visitors with ***all of*** the readers in   &#x60;reader_name_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds visitors with ***exactly*** the readers in   &#x60;reader_name_list&#x60; (all of the access levels and no others).  (default to any_of)
    # @option opts [String] :timezone_name_list A list of timezone names for which to search visitors. For example: &#x60;[name1,name2,name3]&#x60;. This parameter is interpreted based on &#x60;timezone_name_list_search_type&#x60;. 
    # @option opts [String] :timezone_name_list_search_type The type of timezone name list search to apply. This parameter describes how to interpret &#x60;timezone_name_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds visitors with ***any of*** the timezones in   &#x60;timezone_name_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds visitors with ***none of*** the timezones in   &#x60;timezone_name_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds visitors with ***all of*** the timezones in   &#x60;timezone_name_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds visitors with ***exactly*** the timezones in   &#x60;timezone_name_list&#x60; (all of the access levels and no others).  (default to any_of)
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [PagedInstances]
    def get_visitor_search(version, opts = {})
      data, _status_code, _headers = get_visitor_search_with_http_info(version, opts)
      data
    end

    # Advanced visitor search
    # Performs an advanced visitor search, optionally searching on Badge fields.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :auto_load_badge A flag indicating whether to load the badges assigned to visitors in the response.
    # @option opts [BOOLEAN] :auto_load_multimedia_object A flag indicating whether to load the multimedia objects such as pictures and signatures assigned to visitors in the response.
    # @option opts [BOOLEAN] :auto_load_access_level A flag indicating whether to load the access levels assigned to visitors in the response.
    # @option opts [BOOLEAN] :auto_load_reader A flag indicating whether to load the readers assigned to access levels in the response.
    # @option opts [BOOLEAN] :auto_load_timezone A flag indicating whether to load the timezones assigned to access levels in the response.
    # @option opts [BOOLEAN] :auto_load_timezone_interval A flag indicating whether to load the timezone intervals related to timezone.
    # @option opts [String] :visitor_filter The filter based on Visitor properties.
    # @option opts [String] :badge_filter The filter based on Badge properties.
    # @option opts [BOOLEAN] :sum_badge_filter A flag indicating whether to join visitor and badge filter with OR instead of AND operator.
    # @option opts [BOOLEAN] :has_badges Boolean search for the presence of a Badge.
    # @option opts [BOOLEAN] :has_photo Boolean search for the presence of a visitor photo.
    # @option opts [BOOLEAN] :has_signature Boolean search for the presence of a visitor signature.
    # @option opts [BOOLEAN] :has_any_directory_account Boolean search for the presence of a visitor directory account.
    # @option opts [String] :access_level_filter The filter based on Access Level properties.
    # @option opts [String] :access_level_list A list of access level IDs for which to search visitors. For example: &#x60;[1,2,3]&#x60;. This parameter is interpreted based on &#x60;access_level_search_type&#x60;. 
    # @option opts [String] :access_level_search_type The type of access level search to apply. This parameter describes how to interpret &#x60;access_level_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds visitors with ***any of*** the access levels in   &#x60;access_level_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds visitors with ***none of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds visitors with ***all of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds visitors with ***exactly*** the access levels in   &#x60;access_level_list&#x60; (all of the access levels and no others). 
    # @option opts [String] :reader_filter The filter based on Reader properties.
    # @option opts [String] :reader_name_list A list of reader names for which to search visitors. For example: &#x60;[name1,name2,name3]&#x60;. This parameter is interpreted based on &#x60;reader_name_list_search_type&#x60;. 
    # @option opts [String] :reader_name_list_search_type The type of reader name list search to apply. This parameter describes how to interpret &#x60;reader_name_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds visitors with ***any of*** the readers in   &#x60;reader_name_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds visitors with ***none of*** the readers in   &#x60;reader_name_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds visitors with ***all of*** the readers in   &#x60;reader_name_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds visitors with ***exactly*** the readers in   &#x60;reader_name_list&#x60; (all of the access levels and no others). 
    # @option opts [String] :timezone_name_list A list of timezone names for which to search visitors. For example: &#x60;[name1,name2,name3]&#x60;. This parameter is interpreted based on &#x60;timezone_name_list_search_type&#x60;. 
    # @option opts [String] :timezone_name_list_search_type The type of timezone name list search to apply. This parameter describes how to interpret &#x60;timezone_name_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds visitors with ***any of*** the timezones in   &#x60;timezone_name_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds visitors with ***none of*** the timezones in   &#x60;timezone_name_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds visitors with ***all of*** the timezones in   &#x60;timezone_name_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds visitors with ***exactly*** the timezones in   &#x60;timezone_name_list&#x60; (all of the access levels and no others). 
    # @option opts [Integer] :page_number The page number to be returned (starts at 1).
    # @option opts [Integer] :page_size The number of items to be returned per page.
    # @option opts [String] :order_by The field(s) to use when sorting the results.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(PagedInstances, Integer, Hash)>] PagedInstances data, response status code and response headers
    def get_visitor_search_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.get_visitor_search ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.get_visitor_search"
      end
      if @api_client.config.client_side_validation && opts[:'access_level_search_type'] && !['any_of', 'none_of', 'all_of', 'exactly'].include?(opts[:'access_level_search_type'])
        fail ArgumentError, 'invalid value for "access_level_search_type", must be one of any_of, none_of, all_of, exactly'
      end
      if @api_client.config.client_side_validation && opts[:'reader_name_list_search_type'] && !['any_of', 'none_of', 'all_of', 'exactly'].include?(opts[:'reader_name_list_search_type'])
        fail ArgumentError, 'invalid value for "reader_name_list_search_type", must be one of any_of, none_of, all_of, exactly'
      end
      if @api_client.config.client_side_validation && opts[:'timezone_name_list_search_type'] && !['any_of', 'none_of', 'all_of', 'exactly'].include?(opts[:'timezone_name_list_search_type'])
        fail ArgumentError, 'invalid value for "timezone_name_list_search_type", must be one of any_of, none_of, all_of, exactly'
      end
      # resource path
      local_var_path = '/visitors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'auto_load_badge'] = opts[:'auto_load_badge'] if !opts[:'auto_load_badge'].nil?
      query_params[:'auto_load_multimedia_object'] = opts[:'auto_load_multimedia_object'] if !opts[:'auto_load_multimedia_object'].nil?
      query_params[:'auto_load_access_level'] = opts[:'auto_load_access_level'] if !opts[:'auto_load_access_level'].nil?
      query_params[:'auto_load_reader'] = opts[:'auto_load_reader'] if !opts[:'auto_load_reader'].nil?
      query_params[:'auto_load_timezone'] = opts[:'auto_load_timezone'] if !opts[:'auto_load_timezone'].nil?
      query_params[:'auto_load_timezone_interval'] = opts[:'auto_load_timezone_interval'] if !opts[:'auto_load_timezone_interval'].nil?
      query_params[:'visitor_filter'] = opts[:'visitor_filter'] if !opts[:'visitor_filter'].nil?
      query_params[:'badge_filter'] = opts[:'badge_filter'] if !opts[:'badge_filter'].nil?
      query_params[:'sum_badge_filter'] = opts[:'sum_badge_filter'] if !opts[:'sum_badge_filter'].nil?
      query_params[:'has_badges'] = opts[:'has_badges'] if !opts[:'has_badges'].nil?
      query_params[:'has_photo'] = opts[:'has_photo'] if !opts[:'has_photo'].nil?
      query_params[:'has_signature'] = opts[:'has_signature'] if !opts[:'has_signature'].nil?
      query_params[:'has_any_directory_account'] = opts[:'has_any_directory_account'] if !opts[:'has_any_directory_account'].nil?
      query_params[:'access_level_filter'] = opts[:'access_level_filter'] if !opts[:'access_level_filter'].nil?
      query_params[:'access_level_list'] = opts[:'access_level_list'] if !opts[:'access_level_list'].nil?
      query_params[:'access_level_search_type'] = opts[:'access_level_search_type'] if !opts[:'access_level_search_type'].nil?
      query_params[:'reader_filter'] = opts[:'reader_filter'] if !opts[:'reader_filter'].nil?
      query_params[:'reader_name_list'] = opts[:'reader_name_list'] if !opts[:'reader_name_list'].nil?
      query_params[:'reader_name_list_search_type'] = opts[:'reader_name_list_search_type'] if !opts[:'reader_name_list_search_type'].nil?
      query_params[:'timezone_name_list'] = opts[:'timezone_name_list'] if !opts[:'timezone_name_list'].nil?
      query_params[:'timezone_name_list_search_type'] = opts[:'timezone_name_list_search_type'] if !opts[:'timezone_name_list_search_type'].nil?
      query_params[:'page_number'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PagedInstances' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#get_visitor_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Issues mobile credential
    # Issues a credential to a mobile device of the person with the given badge.
    # @param body 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param badgekey 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [IssueMobileCredential]
    def issue_mobile_credential(body, version, badgekey, opts = {})
      data, _status_code, _headers = issue_mobile_credential_with_http_info(body, version, badgekey, opts)
      data
    end

    # Issues mobile credential
    # Issues a credential to a mobile device of the person with the given badge.
    # @param body 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param badgekey 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(IssueMobileCredential, Integer, Hash)>] IssueMobileCredential data, response status code and response headers
    def issue_mobile_credential_with_http_info(body, version, badgekey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.issue_mobile_credential ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstancesApi.issue_mobile_credential"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.issue_mobile_credential"
      end
      # verify the required parameter 'badgekey' is set
      if @api_client.config.client_side_validation && badgekey.nil?
        fail ArgumentError, "Missing the required parameter 'badgekey' when calling InstancesApi.issue_mobile_credential"
      end
      # resource path
      local_var_path = '/badge/{badgekey}/issue_mobile_credential'.sub('{' + 'badgekey' + '}', badgekey.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'IssueMobileCredential' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#issue_mobile_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify an access level
    # Modifies the access level with the given ID. 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param id Id of the access level to modify.
    # @param [Hash] opts the optional parameters
    # @option opts [AccessLevel] :body The modified access level.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [SharedResponseDefinition]
    def modify_access_level(version, id, opts = {})
      data, _status_code, _headers = modify_access_level_with_http_info(version, id, opts)
      data
    end

    # Modify an access level
    # Modifies the access level with the given ID. 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param id Id of the access level to modify.
    # @param [Hash] opts the optional parameters
    # @option opts [AccessLevel] :body The modified access level.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(SharedResponseDefinition, Integer, Hash)>] SharedResponseDefinition data, response status code and response headers
    def modify_access_level_with_http_info(version, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.modify_access_level ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.modify_access_level"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InstancesApi.modify_access_level"
      end
      # resource path
      local_var_path = '/access_level/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'SharedResponseDefinition' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#modify_access_level\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify device group
    # Modify the existing device group with the given ID.
    # @param body 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [AddModifyDeviceGroupResponse]
    def modify_device_group(body, version, opts = {})
      data, _status_code, _headers = modify_device_group_with_http_info(body, version, opts)
      data
    end

    # Modify device group
    # Modify the existing device group with the given ID.
    # @param body 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(AddModifyDeviceGroupResponse, Integer, Hash)>] AddModifyDeviceGroupResponse data, response status code and response headers
    def modify_device_group_with_http_info(body, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.modify_device_group ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstancesApi.modify_device_group"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.modify_device_group"
      end
      # resource path
      local_var_path = '/device_group'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AddModifyDeviceGroupResponse' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#modify_device_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Modify an instance
    # Modifies an instance of the given type.
    # @param body The updated instance.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Instance]
    def modify_instance(body, type_name, version, opts = {})
      data, _status_code, _headers = modify_instance_with_http_info(body, type_name, version, opts)
      data
    end

    # Modify an instance
    # Modifies an instance of the given type.
    # @param body The updated instance.
    # @param type_name 
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @option opts [String] :operation_guid This GUID, formatted as \&quot;00000000-0000-0000-0000-000000000000\&quot;, can be used to indicate a correlation among multiple API calls so that they can be grouped together in the User Transaction Log reports, enhancing their readability. For more information please refer to OpenAccess documentation, section Operation GUID.
    # @option opts [String] :operation_description Userfriendly free-form description for the operation being performed. Use this description to enhance the readability of the User Transaction Log reports. For more information please refer to OpenAccess documentation, section Operation Description.
    # @return [Array<(Instance, Integer, Hash)>] Instance data, response status code and response headers
    def modify_instance_with_http_info(body, type_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.modify_instance ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstancesApi.modify_instance"
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling InstancesApi.modify_instance"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.modify_instance"
      end
      # resource path
      local_var_path = '/instances'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type_name'] = type_name
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?
      query_params[:'operation_guid'] = opts[:'operation_guid'] if !opts[:'operation_guid'].nil?
      query_params[:'operation_description'] = opts[:'operation_description'] if !opts[:'operation_description'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Instance' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#modify_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bulk update the instance property
    # Bulk update the instance property with the given instance ids.
    # @param body 
    # @param type_name Type name.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :id_list List of instance IDs in the format &#x60;[1,2,3,...]&#x60;. If no list is provided, all instances will be affected.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [SharedResponseDefinition]
    def modify_property_bulk_update(body, type_name, version, opts = {})
      data, _status_code, _headers = modify_property_bulk_update_with_http_info(body, type_name, version, opts)
      data
    end

    # Bulk update the instance property
    # Bulk update the instance property with the given instance ids.
    # @param body 
    # @param type_name Type name.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :id_list List of instance IDs in the format &#x60;[1,2,3,...]&#x60;. If no list is provided, all instances will be affected.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(SharedResponseDefinition, Integer, Hash)>] SharedResponseDefinition data, response status code and response headers
    def modify_property_bulk_update_with_http_info(body, type_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.modify_property_bulk_update ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InstancesApi.modify_property_bulk_update"
      end
      # verify the required parameter 'type_name' is set
      if @api_client.config.client_side_validation && type_name.nil?
        fail ArgumentError, "Missing the required parameter 'type_name' when calling InstancesApi.modify_property_bulk_update"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.modify_property_bulk_update"
      end
      # resource path
      local_var_path = '/property_bulk_update'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type_name'] = type_name
      query_params[:'version'] = version
      query_params[:'id_list'] = @api_client.build_collection_param(opts[:'id_list'], :csv) if !opts[:'id_list'].nil?
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'SharedResponseDefinition' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#modify_property_bulk_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit print request for a given badge
    # Submit a request to print the badge.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param badgekey The badge key of the badge associated with an OnGuard cardholder.
    # @param [Hash] opts the optional parameters
    # @option opts [BadgekeyPrintRequestBody] :body Additional parameters associated with a badge print request.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [BadgePrintRequestResponse]
    def print_request(version, badgekey, opts = {})
      data, _status_code, _headers = print_request_with_http_info(version, badgekey, opts)
      data
    end

    # Submit print request for a given badge
    # Submit a request to print the badge.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param badgekey The badge key of the badge associated with an OnGuard cardholder.
    # @param [Hash] opts the optional parameters
    # @option opts [BadgekeyPrintRequestBody] :body Additional parameters associated with a badge print request.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(BadgePrintRequestResponse, Integer, Hash)>] BadgePrintRequestResponse data, response status code and response headers
    def print_request_with_http_info(version, badgekey, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.print_request ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.print_request"
      end
      # verify the required parameter 'badgekey' is set
      if @api_client.config.client_side_validation && badgekey.nil?
        fail ArgumentError, "Missing the required parameter 'badgekey' when calling InstancesApi.print_request"
      end
      # resource path
      local_var_path = '/badge/{badgekey}/print_request'.sub('{' + 'badgekey' + '}', badgekey.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'BadgePrintRequestResponse' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#print_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send incoming events
    # Send a list of events to OnGuard.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [NewIncomingEvents] :body The new incoming events.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [SendIncomingEventsResponse]
    def send_incoming_events(version, opts = {})
      data, _status_code, _headers = send_incoming_events_with_http_info(version, opts)
      data
    end

    # Send incoming events
    # Send a list of events to OnGuard.
    # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
    # @param [Hash] opts the optional parameters
    # @option opts [NewIncomingEvents] :body The new incoming events.
    # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
    # @option opts [BOOLEAN] :do_not_reset_inactivity_timer If true, this request does not affect the inactivity timer - that is, the timer is not reset to zero, and continues counting from the point of the last recorded OpenAccess activity.
    # @return [Array<(SendIncomingEventsResponse, Integer, Hash)>] SendIncomingEventsResponse data, response status code and response headers
    def send_incoming_events_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstancesApi.send_incoming_events ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling InstancesApi.send_incoming_events"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['1.0', '1.1'].include?(version)
        fail ArgumentError, "invalid value for 'version', must be one of 1.0, 1.1"
      end
      # resource path
      local_var_path = '/send_incoming_events'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'version'] = version
      query_params[:'queue'] = opts[:'queue'] if !opts[:'queue'].nil?
      query_params[:'do_not_reset_inactivity_timer'] = opts[:'do_not_reset_inactivity_timer'] if !opts[:'do_not_reset_inactivity_timer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'SendIncomingEventsResponse' 

      auth_names = opts[:auth_names] || ['ApplicationId', 'SessionToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstancesApi#send_incoming_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
