=begin
#OpenAccess

#This document describes the OpenAccess REST API. OpenAccess provides access to OnGuard via a RESTful web service.  ## Security / licensing headers  Each authenticated request must include the following HTTP headers:   - `Application-Id` - Each application using the OpenAccess API must have a unique application ID.   - `Session-Token` - A session token is retrieved by logging in via the `POST /authentication` operation.  ## Input parameter location - Query string or request body?  Input parameters can be placed either in the request body or in the URL, as a query parameter. The API makes no distinction and will handle them in either location. In the API specification, some parameters are described as being in the request body, and others are described as being in the query string. This is done simply for clarity in each situation, but clients of the API are free to include parameters wherever it is most convenient. **Sensitive data should always be placed in the request body and not exposed in the URL.**  ### **POST /instances** example  ``` POST /instances?type_name=Lnl_Cardholder&version=1.0 {   \"property_value_map\": {     ...   } } ```  ...is equivalent to this...  ``` POST /instances&version=1.0 {   \"type_name\": \"Lnl_Cardholder\",   \"property_value_map\": {     ...   } } ```  ## Task queuing - dealing with long running requests  Some requests might take a long time, especially requests that access external systems, such as Active Directory. Standard OpenAccess requests will time out after 30 seconds if the HTTP request doesn't time out sooner, depending on the client. Any request that you expect to run long can be queued as a task by adding a `queue` property to the request, set to `true`. For example: ``` GET /directory_accounts_matching_cardholders?directory_id=id1 &cardholder_ids=[1,2,3,4,5,6,7,8,9,10] &filter=displayname has 'firstname' and displayname has 'lastname' &queue=true &version=1.0 ```  When a request is queued in this way, OpenAccess will queue a task for execution and return a 202 (Accepted) HTTP status code and a response identical to `GET /queue/{id}`. For example: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"status\": \"pending\",   \"version\": \"1.0\" } ```  The `id` property indicates the ID of the queued task, which can be used to check the status of the task: ``` GET /queue/5c4b7890-ee73-4199-b3d3-366003eb8ca1?version=1.0 ```  When the task is complete, the response will include the response to the queued request: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"response\": {     ...   },   \"status\": \"complete\",   \"version\": \"1.0\" } ```  The response can be retrieved any number of times until the task is deleted. A completed task can be deleted with `DELETE /queue/{id}` or it will be deleted automatically after 1 hour.  **Note:** Even though you can queue any request, it's only recommended when a request is expected to run long, like `GET /directory_accounts` and `GET /directory_accounts_matching_cardholders`.  ## Samples  There are several sample applications that demonstrate various aspects of the API.  ### [Cardholder Search](/api/access/onguard/openaccess/samples/Cardholder Search) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting cardholders and photos - `GET /instances`  ### [Command and Control](/api/access/onguard/openaccess/samples/Command and Control) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting panels and readers - `GET /instances` - Updating hardware status, getting/setting reader mode, and opening doors - `POST /execute_method`  ### [Event Subscriber](/api/access/onguard/openaccess/samples/Event Subscriber) - Getting directories used for authentication - `GET /directories` (not used within every event subscriber sample) - Login and logout - `POST /authentication` and `DELETE /authentication` - Adding/modifying/disabling event subscriptions - `POST /event_subscriptions`, `PUT /event_subscriptions`, and `DELETE /event_subscriptions` - Using the Web Event Bridge to receive events via WebSocket 

OpenAPI spec version: 7.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::InstancesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'InstancesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::InstancesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of InstancesApi' do
    it 'should create an instance of InstancesApi' do
      expect(@instance).to be_instance_of(SwaggerClient::InstancesApi)
    end
  end

  # unit tests for add_instance
  # Add an instance
  # Adds an instance of the given type.
  # @param type_name 
  # @param instance The new instance.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [Instance]
  describe 'add_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_instance
  # Delete an instance
  # Deletes an instance of the given type.
  # @param type_name 
  # @param instance The instance to delete, with only key properties required.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'delete_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_print_request
  # Delete a specific badge print request
  # Delete a request to print the badge.
  # @param badge_print_request_id The badge print request ID represents a unique identifier associated with a badge print request.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :request_body Pass an empty request body.
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [nil]
  describe 'delete_print_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for execute_method
  # Execute method
  # Executes a method on an instance.
  # @param type_name The type for which to execute a method.
  # @param method_name The name of the method to execute.
  # @param execute_method_parameters The execute method parameters.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [ExecuteMethodResults]
  describe 'execute_method test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_badge_printers
  # Retrieve a list of badge printers
  # Retrieve a list of badge printers.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :badge_type_id The ID associated with a given badge type.
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [BadgePrinters]
  describe 'get_badge_printers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_cardholder_search
  # Advanced cardholder search
  # Performs an advanced cardholder search, optionally searching on Badge fields.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cardholder_filter The filter based on Cardholder properties.
  # @option opts [String] :badge_filter The filter based on Badge properties.
  # @option opts [BOOLEAN] :has_badges Boolean search for the presence of a Badge.
  # @option opts [BOOLEAN] :has_photo Boolean search for the presence of a cardholder photo.
  # @option opts [BOOLEAN] :has_signature Boolean search for the presence of a cardholder signature.
  # @option opts [BOOLEAN] :has_any_directory_account Boolean search for the presence of a cardholder directory account.
  # @option opts [String] :access_level_list A list of access level IDs for which to search cardholders. For example: &#x60;[1,2,3]&#x60;. This parameter is interpreted based on &#x60;access_level_search_type&#x60;. 
  # @option opts [String] :access_level_search_type The type of access level search to apply. This parameter describes how to interpret &#x60;access_level_list&#x60;. - &#x60;\&quot;any_of\&quot;&#x60; - Finds cardholders with ***any of*** the access levels in   &#x60;access_level_list&#x60; (at least one). - &#x60;\&quot;none_of\&quot;&#x60; - Finds cardholders with ***none of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;all_of\&quot;&#x60; - Finds cardholders with ***all of*** the access levels in   &#x60;access_level_list&#x60;. - &#x60;\&quot;exactly\&quot;&#x60; - Finds cardholders with ***exactly*** the access levels in   &#x60;access_level_list&#x60; (all of the access levels and no others). 
  # @option opts [Integer] :page_number The page number to be returned (starts at 1).
  # @option opts [Integer] :page_size The number of items to be returned per page.
  # @option opts [String] :order_by The field(s) to use when sorting the results.
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [PagedInstances]
  describe 'get_cardholder_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_count
  # Get count
  # Gets the number of instances of a given type.
  # @param type_name 
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter 
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [Object]
  describe 'get_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_instances
  # Get instances
  # Gets instances of the given type.
  # @param type_name 
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter 
  # @option opts [Integer] :page_number The page number to be returned (starts at 1).
  # @option opts [Integer] :page_size The number of items to be returned per page.
  # @option opts [String] :order_by The field(s) to use when sorting the results.
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [PagedInstances]
  describe 'get_instances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_logged_events
  # Get logged events
  # Used to retrieve a page of logged events and their relevant properties.
  # @param filter The filter based on logged event properties.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_number The page number to be returned (starts at 1).
  # @option opts [Integer] :page_size The number of items to be returned per page.
  # @option opts [String] :order_by The field(s) to use when sorting the results.
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [GetLoggedEvents]
  describe 'get_logged_events test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_mobile_devices
  # A list of mobile devices for a badge.
  # Gets a list of mobile devices for a person associated with a badge. This list comes from the mobile credentialing services associated with the badge type of this badge.
  # @param badgekey The badgekey of the badge assigned to the mobile devices you want to get from OnGuard.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [BadgeMobileDevices]
  describe 'get_mobile_devices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_print_request
  # Retrieve a specific badge print request
  # Get the status of a print request for the badge.
  # @param badge_print_request_id The badge print request ID represents a unique identifier associated with a badge print request.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [BadgePrintRequestResponse]
  describe 'get_print_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_type
  # Get type details
  # Gets the details of a specific type.
  # @param type_name 
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [Type]
  describe 'get_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_types
  # Get type list
  # Gets a list of the supported instance types.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [Types]
  describe 'get_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_video_recorder_authentication_data
  # Get video recorder authentication data
  # Retrieves the authentication token for a Lenel NVR. This token is used for authentication and authorization against LNVR Services.
  # @param id The panel ID of the recorder for which the authentication data is being requested.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [VideoRecorderAuthenticationData]
  describe 'get_video_recorder_authentication_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_video_recorders
  # Get video recorders
  # Used to retrieve a page of video recorders and their relevant properties. 
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_number The page number to be returned (starts at 1).
  # @option opts [Integer] :page_size The number of items to be returned per page.
  # @option opts [String] :order_by The field(s) to use when sorting the results.
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [GetVideoRecorders]
  describe 'get_video_recorders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issue_mobile_credential
  # Issues mobile credential
  # Issues a credential to a mobile device of the person with the given badge.
  # @param badgekey 
  # @param in_parameter_value_map 
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [IssueMobileCredential]
  describe 'issue_mobile_credential test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modify_access_level
  # Modify an access level
  # Modifies the access level with the given ID. 
  # @param id Id of the access level to modify.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [AccessLevel] :modified_access_level The modified access level.
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'modify_access_level test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modify_instance
  # Modify an instance
  # Modifies an instance of the given type.
  # @param type_name 
  # @param instance The updated instance.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [Instance]
  describe 'modify_instance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modify_property_bulk_update
  # Bulk update the instance property
  # Bulk update the instance property with the given instance ids.
  # @param type_name Type name.
  # @param parameter_name 
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Integer>] :id_list List of instance IDs in the format &#x60;[1,2,3,...]&#x60;. If no list is provided, all instances will be affected.
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'modify_property_bulk_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for print_request
  # Submit print request for a given badge
  # Submit a request to print the badge.
  # @param badgekey The badge key of the badge associated with an OnGuard cardholder.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [PrintRequest] :print_request Additional parameters associated with a badge print request.
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [BadgePrintRequestResponse]
  describe 'print_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
