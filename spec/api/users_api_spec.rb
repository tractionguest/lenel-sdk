=begin
#OpenAccess

#This document describes the OpenAccess REST API. OpenAccess provides access to OnGuard via a RESTful web service.  ## Security / licensing headers  Each authenticated request must include the following HTTP headers:   - `Application-Id` - Each application using the OpenAccess API must have a unique application ID.   - `Session-Token` - A session token is retrieved by logging in via the `POST /authentication` operation.  ## Input parameter location - Query string or request body?  Input parameters can be placed either in the request body or in the URL, as a query parameter. The API makes no distinction and will handle them in either location. In the API specification, some parameters are described as being in the request body, and others are described as being in the query string. This is done simply for clarity in each situation, but clients of the API are free to include parameters wherever it is most convenient. **Sensitive data should always be placed in the request body and not exposed in the URL.**  ### **POST /instances** example  ``` POST /instances?type_name=Lnl_Cardholder&version=1.0 {   \"property_value_map\": {     ...   } } ```  ...is equivalent to this...  ``` POST /instances&version=1.0 {   \"type_name\": \"Lnl_Cardholder\",   \"property_value_map\": {     ...   } } ```  ## Task queuing - dealing with long running requests  Some requests might take a long time, especially requests that access external systems, such as Active Directory. Standard OpenAccess requests will time out after 30 seconds if the HTTP request doesn't time out sooner, depending on the client. Any request that you expect to run long can be queued as a task by adding a `queue` property to the request, set to `true`. For example: ``` GET /directory_accounts_matching_cardholders?directory_id=id1 &cardholder_ids=[1,2,3,4,5,6,7,8,9,10] &filter=displayname has 'firstname' and displayname has 'lastname' &queue=true &version=1.0 ```  When a request is queued in this way, OpenAccess will queue a task for execution and return a 202 (Accepted) HTTP status code and a response identical to `GET /queue/{id}`. For example: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"status\": \"pending\",   \"version\": \"1.0\" } ```  The `id` property indicates the ID of the queued task, which can be used to check the status of the task: ``` GET /queue/5c4b7890-ee73-4199-b3d3-366003eb8ca1?version=1.0 ```  When the task is complete, the response will include the response to the queued request: ``` {   \"id\": \"5c4b7890-ee73-4199-b3d3-366003eb8ca1\",   \"response\": {     ...   },   \"status\": \"complete\",   \"version\": \"1.0\" } ```  The response can be retrieved any number of times until the task is deleted. A completed task can be deleted with `DELETE /queue/{id}` or it will be deleted automatically after 1 hour.  **Note:** Even though you can queue any request, it's only recommended when a request is expected to run long, like `GET /directory_accounts` and `GET /directory_accounts_matching_cardholders`.  ## Samples  There are several sample applications that demonstrate various aspects of the API.  ### [Cardholder Search](/api/access/onguard/openaccess/samples/Cardholder Search) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting cardholders and photos - `GET /instances`  ### [Command and Control](/api/access/onguard/openaccess/samples/Command and Control) - Getting directories used for authentication - `GET /directories` - Login and logout - `POST /authentication` and `DELETE /authentication` - Getting panels and readers - `GET /instances` - Updating hardware status, getting/setting reader mode, and opening doors - `POST /execute_method`  ### [Event Subscriber](/api/access/onguard/openaccess/samples/Event Subscriber) - Getting directories used for authentication - `GET /directories` (not used within every event subscriber sample) - Login and logout - `POST /authentication` and `DELETE /authentication` - Adding/modifying/disabling event subscriptions - `POST /event_subscriptions`, `PUT /event_subscriptions`, and `DELETE /event_subscriptions` - Using the Web Event Bridge to receive events via WebSocket 

OpenAPI spec version: 7.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for LenelClient::UsersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UsersApi' do
  before do
    # run before each test
    @instance = LenelClient::UsersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersApi' do
    it 'should create an instance of UsersApi' do
      expect(@instance).to be_instance_of(LenelClient::UsersApi)
    end
  end

  # unit tests for add_managed_access_levels
  # Add managed access levels
  # Adds to the existing list of access levels a user can manage.
  # @param id ID of user to which access level management will be added.
  # @param levels A list of access level IDs the user can manage.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'add_managed_access_levels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_user_preferences
  # Add user preference
  # Adds a user preference.
  # @param user_preferences 
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [AddUserPreferences]
  describe 'add_user_preferences test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_user_segments
  # Add user segments
  # Adds to the existing list of segments assigned to a user.
  # @param id ID of the user to which segment assignment will be added.
  # @param segments A list of segment IDs that indicate which segments to assign to the user.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'add_user_segments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_managed_access_levels
  # Delete managed access levels
  # Deletes specific access levels from the access levels a user can manage.
  # @param id ID of user from which to remove access level management.
  # @param levels A list of access level IDs the user cannot manage.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'delete_managed_access_levels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_user_preferences
  # Delete user preference
  # Deletes specified preference from the existing user preferences.
  # @param preference_id ID of user preference to be deleted.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'delete_user_preferences test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_user_segments
  # Delete user segments
  # Deletes specific segments from the segments assigned to a user.
  # @param id ID of user from which to remove segment assignment.
  # @param segments A list of segment IDs that indicate which segments to remove from the user.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'delete_user_segments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_editable_segments
  # Get editable segments
  # Returns a list of segments for which the logged-in user has editable permission, if segmentation is enabled.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [Segments]
  describe 'get_editable_segments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_logged_in_user
  # Get logged in user
  # Gets details about the logged in user.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [LoggedInUser]
  describe 'get_logged_in_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_managed_access_levels
  # Get managed access levels
  # Returns a list of access levels a user can manage and a flag indicating whether the user has AAM view-only access.
  # @param id ID of user for whom you want a list of access levels the user can manage. If this parameter is not provided, the access level list is provided for the logged in user.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [ManagedAccessLevels]
  describe 'get_managed_access_levels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_managers_of_access_level
  # Get managers of access level
  # Returns a list of user IDs for users who can manage the access level.
  # @param access_level_id ID of the access level for which to retrieve users who can manage that access level.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [AccessLevelManagerIds]
  describe 'get_managers_of_access_level test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_preferences
  # Get user preferences
  # Returns user preferences for the current user and application type
  # @param client_name The application client name
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :setting_type Type of settings to be queried
  # @option opts [BOOLEAN] :is_global A flag indicating whether the preference is global
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [GetUserPreferences]
  describe 'get_user_preferences test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_segments
  # Get user segments
  # Returns a list of segments assigned to a user.
  # @param id ID of the user for whom you want to retrieve segments.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [Segments]
  describe 'get_user_segments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for getuser
  # Get extended properties for a user
  # Gets extended properties for a user.
  # @param id ID of user for which to retrieve the extended properties.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [UserExtendedProperties]
  describe 'getuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modify_user_password
  # Modify user password
  # Modify the user&#39;s password.
  # @param parameter_name 
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'modify_user_password test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modify_user_preferences
  # Modify user preference
  # Modify the existing user preference with the given ID.
  # @param user_preferences 
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [ModifyUserPreferences]
  describe 'modify_user_preferences test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modifyuser
  # Sets the extended properties for a user
  # Sets the extended properties for a user.
  # @param id ID of user for which to set the extended properties.
  # @param version Used to maintain backward compatibility as the API is updated, in the format 1.0.
  # @param [Hash] opts the optional parameters
  # @option opts [UserExtendedPropertiesPut] :properties The updated properties
  # @option opts [BOOLEAN] :queue Queues the request as a task and returns a response identical to &#x60;GET /queue/{id}&#x60;.
  # @return [SharedResponseDefinition]
  describe 'modifyuser test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
